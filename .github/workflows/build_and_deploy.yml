name: Build Image and Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - 'trunk'
  pull_request:
    branches:
      - 'trunk'
permissions:
  contents: read
  packages: write

concurrency:
  group: docker-biad-${{ github.ref }}
  cancel-in-progress: true

env:
  SYSDIG_SECURE_ENDPOINT: "https://us2.app.sysdig.com"

jobs:
  prep:
    if: github.repository_owner == 'ideacrew' && ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (github.event.pull_request.head.repo.owner.login == 'ideacrew'))
    runs-on: ubuntu-latest
    outputs:
      taggedImage: ${{ steps.prep.outputs.tagged_image }}
      shortSha: ${{ steps.prep.outputs.short_sha}}
      branchName: ${{ steps.prep.outputs.branch_name }}
      latestTag: ${{ steps.prep.outputs.latest_tag }}
      repositoryName: ${{ steps.prep.outputs.repository_name }}
      registryEcr: ${{ steps.prep.outputs.registry_ecr }}
      registryGhcr: ${{ steps.prep.outputs.registry_ghcr }}
    steps:
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1
      - name: Prepare info
        id: prep
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          TAG=${{ env.GIT_BRANCH_NAME }}-$(echo $GITHUB_SHA | head -c7)
          IMAGE=ideacrew/$REPO
          echo "tagged_image=${IMAGE}:${TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "branch_name=${{ env.GIT_BRANCH_NAME }}" >> $GITHUB_OUTPUT
          echo "repository_name=$REPO" >> $GITHUB_OUTPUT
          echo "latest_tag=${IMAGE}:latest" >> $GITHUB_OUTPUT
          echo "registry_ecr=public.ecr.aws" >> $GITHUB_OUTPUT
          echo "registry_ghcr=ghcr.io" >> $GITHUB_OUTPUT

# Uses buildx to build and push the image
  build-and-upload-image:
    needs: [prep]
    runs-on: ubuntu-latest
    steps:
      # Check out repository
      - uses: actions/checkout@v2

      - name: Add git HEAD info to docker image
        run: |
          git show --quiet HEAD > release.txt
          echo -e "current branch: $(git rev-parse --abbrev-ref HEAD)\n\n$(git show --quiet HEAD)" > public/release.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: v0.9.1

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      # Provide credentials for AWS
      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Must use docker login in order to specify public registry
      - name: Login to Public ECR
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.prep.outputs.registryEcr }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ needs.prep.outputs.registryGhcr }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: .docker/production/Dockerfile
          # Set the desired build target here
          target: deploy
          # needed to access mongo and rabbit on GHA machine
          network: host
          # send to public registry if not a pull request
          push: ${{ github.event_name != 'pull_request' }}
          # create local image (for scanning) if it is a pull request
          load: ${{ github.event_name == 'pull_request' }}
          tags: |
            ${{ format('{0}/{1}', needs.prep.outputs.registryGhcr, needs.prep.outputs.taggedImage) }}
            ${{ format('{0}/{1}', needs.prep.outputs.registryGhcr, needs.prep.outputs.latestTag) }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          build-args: |
            HOSTNAME=172.17.0.1
      - name: Check Sysdig CLI Version
        run: |
          mkdir -p cache
          curl -sL -o "${GITHUB_WORKSPACE}/cache/sysdig_latest_version.txt" https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt
      - name: Sysdig CLI Binary Cache
        uses: actions/cache@v4
        id: sysdig-cli-binary-cache
        with:
          path: cache/sysdig-cli-scanner
          key: ${{ runner.os }}-cache-${{ hashFiles('**/sysdig_latest_version.txt') }}
      - name: Download Sysdig CLI Binary
        if: steps.sysdig-cli-binary-cache.outputs.cache-hit != 'true'
        run: |
          curl -sL -o "${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner" "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(cat ${GITHUB_WORKSPACE}/cache/sysdig_latest_version.txt)/linux/amd64/sysdig-cli-scanner"
          chmod +x "${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner"
      - name: Setup Sysdig DB Cache
        uses: actions/cache@v4
        with:
          path: cache/db
          key: ${{ runner.os }}-cache-
      - name: Setup Sysdig Scanner Cache
        uses: actions/cache@v4
        with:
          path: cache/scanner-cache
          key: ${{ runner.os }}-cache-
      - name: Scan docker image
        if: github.event_name != 'pull_request'
        id: scan
        uses: anchore/scan-action@main
        with:
          image: ${{ needs.prep.outputs.registryGhcr }}/${{ needs.prep.outputs.taggedImage }}
          acs-report-enable: true
          fail-build: false
          severity-cutoff: critical
      - name: Scan the image with Sysdig
        env:
          SECURE_API_TOKEN: ${{ secrets.SECURE_API_TOKEN }}
        run: |
          ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner \
            --apiurl "${SYSDIG_SECURE_ENDPOINT}" \
            ${{ format('{0}/{1}', needs.prep.outputs.registryGhcr, needs.prep.outputs.taggedImage) }} \
            --console-log \
            --dbpath="${GITHUB_WORKSPACE}/cache/db/" \
            --cachepath="${GITHUB_WORKSPACE}/cache/scanner-cache/"
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  notify-slack:
    if: github.event_name != 'pull_request'
    needs: [prep, build-and-upload-image]
    runs-on: ubuntu-latest
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.16.0
        with:
          channel-id: 'docker-images-${{ needs.prep.outputs.repositoryName }}'
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ghcr.io image*:\n`ghcr.io/${{ needs.prep.outputs.taggedImage }}`"
                  }
                },
                {
                  "type": "divider"
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.YELLR_BOT_TOKEN }}
